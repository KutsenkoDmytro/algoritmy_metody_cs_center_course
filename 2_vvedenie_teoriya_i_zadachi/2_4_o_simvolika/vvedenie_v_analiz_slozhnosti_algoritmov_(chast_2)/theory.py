#Линейный поиск.
a = [1,2,3,4,5]
value = 5
exists = False
for i in a:
    if i == value:
        exists = True
        break
print(exists)

#Упражнение 2
#f( n ) = 4 + 2n + 2 количество инструкций при наиболее неблагоприятном случае.
#Асимптотика f(n) = n

#Сортировка пузырьком.
lst = [2,5,8,13,23,21,23,3,4]

for i in range(len(lst)):
    for j in range(i+1, len(lst)):
        if lst[i] > lst[j]:
            lst[i], lst[j] = lst[j], lst[i]

print(lst)

#Сортировка выбором.
def selection_sort(arr):
    n = len(arr)

    for i in range(n - 1):  # Проходим по всем элементам, кроме последнего
        min_index = i  # Предполагаем, что текущий индекс содержит минимальное значение

        # Находим индекс минимального элемента в оставшейся части массива
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j

        # Обмен значениями текущего элемента с минимальным элементом
        arr[i], arr[min_index] = arr[min_index], arr[i]

    return arr

#Упражнение 3.
# Алгоритм с Θ( n ) имеет O( n ) Истино
# Алгоритм с Θ( n ) имеет O( n2 ) Истино
# Алгоритм с Θ( n2 ) имеет O( n3 ) Истино
# Алгоритм с Θ( n ) имеет O( 1 ) Ложно
# Алгоритм с O( 1 ) имеет Θ( 1 ) Истинно
# Алгоритм с O( n ) имеет Θ( 1 ) Ложно

#Упражнение 5.
#Определите, какие из следующих границ строгие, а какие — нет.

# Θ( n ) алгоритм, для которого мы нашли O( n ), как верхнюю границу / Строгая
# Θ( n2 ) алгоритм, для которого мы нашли O( n3 ), как верхнюю границу / Не строгая
# Θ( 1 ) алгоритм, для которого мы нашли O( n ), как верхнюю границу / Не строгая
# Θ( n ) алгоритм, для которого мы нашли O( 1 ), как верхнюю границу / Ошибка
# Θ( n ) алгоритм, для которого мы нашли O( 2n ), как верхнюю границу / Строгая


#Упражнение 6.
# Для следующих Θ-сложностей напишите строгие и нестрогие О-пределы и, по желанию, строгие и нестрогие Ω-пределы (при условии, что они существуют).
# Θ( 1 ) / О( 1 ), Ω ( 1 ), o ( n )
# Θ( √n ) / О( √n ), Ω ( √n ), o ( n ), ω( 1 )
# Θ( n ) / О( n ), Ω ( n ), o ( n3 ), ω( 1 )
# Θ( n2 ) / О( n2 ), Ω ( n2 ), o ( n3 ), ω( 1 )
# Θ( n3 ) / О( n3 ), Ω ( n3 ), o (√n n3 ), ω( √n n2 )

# Оператор сравнения асимптотических оценок	Оператор сравнения чисел
# Алгоритм является o( что-то )	Число < чего-то
# Алгоритм является O( что-то )	Число ≤ чего-то
# Алгоритм является Θ( что-то )	Число = чему-то
# Алгоритм является Ω( что-то )	Число ≥ чего-то
# Алгоритм является ω( что-то )	Число > чего-то